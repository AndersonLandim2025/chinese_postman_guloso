{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "private_outputs": true,
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "Teste do código de Otimização de Rotas versão 2.0"
      ],
      "metadata": {
        "id": "d6qFdIT9oTZq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Instalar a biblioteca DEAP\n",
        "!pip install deap\n",
        "\n",
        "# Importar bibliotecas necessárias\n",
        "import random\n",
        "from deap import base, creator, tools, algorithms\n",
        "\n",
        "# Definindo a classe de pontos de entrega\n",
        "pontos = {\n",
        "    1: \"Memorial Paulo Freire\",\n",
        "    2: \"Praça das Flores - UFERSA Angicos, RN\",\n",
        "    3: \"Restaurante Universitário\",\n",
        "    4: \"Biblioteca Campus Angicos\",\n",
        "    5: \"Bloco 1 de Aulas\",\n",
        "    6: \"Bloco 2 de Aulas\",\n",
        "    7: \"Bloco administrativo - UFERSA Angicos, RN\",\n",
        "    8: \"Laboratórios 1 - UFERSA Angicos, RN\",\n",
        "    9: \"Laboratórios 2 - UFERSA Angicos, RN\",\n",
        "    10: \"Bloco 1 de Professores\",\n",
        "    11: \"Bloco 2 de Professores\",\n",
        "    12: \"Estacionamento\",\n",
        "    13: \"Garagem da UFERSA Angicos\",\n",
        "    14: \"Ginásio Poliesportivo da UFERSA Angicos\",\n",
        "    15: \"Almoxarifado da UFERSA Angicos\"\n",
        "}\n",
        "\n",
        "# Lista de pontos para facilitar o acesso\n",
        "pontos_lista = list(pontos.values())\n",
        "\n",
        "# Matriz de distâncias predefinidas (em metros)\n",
        "# Cada linha e coluna corresponde a um ponto na ordem da lista `pontos_lista`\n",
        "distancias = [\n",
        "    # Memorial Paulo Freire\n",
        "    [0, 500, 400, 300, 200, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500],\n",
        "    # Praça das Flores - UFERSA Angicos, RN\n",
        "    [500, 0, 350, 450, 550, 650, 750, 850, 950, 1050, 1150, 1250, 1350, 1450, 1550],\n",
        "    # Restaurante Universitário\n",
        "    [400, 350, 0, 250, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300],\n",
        "    # Biblioteca Campus Angicos\n",
        "    [300, 450, 250, 0, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100],\n",
        "    # Bloco 1 de Aulas\n",
        "    [200, 550, 300, 100, 0, 150, 250, 350, 450, 550, 650, 750, 850, 950, 1050],\n",
        "    # Bloco 2 de Aulas\n",
        "    [600, 650, 400, 200, 150, 0, 350, 450, 550, 650, 750, 850, 950, 1050, 1150],\n",
        "    # Bloco administrativo - UFERSA Angicos, RN\n",
        "    [700, 750, 500, 300, 250, 350, 0, 450, 550, 650, 750, 850, 950, 1050, 1150],\n",
        "    # Laboratórios 1 - UFERSA Angicos, RN\n",
        "    [800, 850, 600, 400, 350, 450, 450, 0, 650, 750, 850, 950, 1050, 1150, 1250],\n",
        "    # Laboratórios 2 - UFERSA Angicos, RN\n",
        "    [900, 950, 700, 500, 450, 550, 550, 650, 0, 850, 950, 1050, 1150, 1250, 1350],\n",
        "    # Bloco 1 de Professores\n",
        "    [1000, 1050, 800, 600, 550, 650, 650, 750, 850, 0, 1050, 1150, 1250, 1350, 1450],\n",
        "    # Bloco 2 de Professores\n",
        "    [1100, 1150, 900, 700, 650, 750, 750, 850, 950, 1050, 0, 1250, 1350, 1450, 1550],\n",
        "    # Estacionamento\n",
        "    [1200, 1250, 1000, 800, 750, 850, 850, 950, 1050, 1152, 1250, 0, 1350, 1450, 1550],\n",
        "    # Garagem da UFERSA Angicos\n",
        "    [1300, 1350, 1100, 900, 850, 950, 950, 1050, 1150, 1250, 1350, 1350, 0, 1450, 1550],\n",
        "    # Ginásio Poliesportivo da UFERSA Angicos\n",
        "    [1400, 1450, 1200, 1000, 950, 1050, 1050, 1150, 1250, 1350, 1450, 1450, 1450, 0, 1550],\n",
        "    # Almoxarifado da UFERSA Angicos\n",
        "    [1500, 1550, 1300, 1100, 1050, 1150, 1150, 1250, 1350, 1450, 1550, 1550, 1550, 1550, 0]\n",
        "]\n",
        "\n",
        "# Função para calcular a distância total de um percurso\n",
        "def calcular_distancia_total(individuo, distancias, pontos_selecionados):\n",
        "    total = 0\n",
        "    # o individuo agora é uma lista de indices, nao o nome do ponto\n",
        "    # por isso ele usa o index no pontos_selecionados\n",
        "    for i in range(len(individuo) - 1):\n",
        "        ponto1_idx = individuo[i]\n",
        "        ponto2_idx = individuo[i + 1]\n",
        "        ponto1 = pontos_selecionados[ponto1_idx]\n",
        "        ponto2 = pontos_selecionados[ponto2_idx]\n",
        "        total += distancias[list(pontos.values()).index(ponto1)][list(pontos.values()).index(ponto2)]\n",
        "    # Volta ao ponto inicial\n",
        "    ponto1_idx = individuo[-1]\n",
        "    ponto2_idx = individuo[0]\n",
        "    ponto1 = pontos_selecionados[ponto1_idx]\n",
        "    ponto2 = pontos_selecionados[ponto2_idx]\n",
        "    total += distancias[list(pontos.values()).index(ponto1)][list(pontos.values()).index(ponto2)]\n",
        "    return total\n",
        "\n",
        "# Função de avaliação do fitness (distância total)\n",
        "def avaliar(individuo, pontos_selecionados):\n",
        "    # nao precisa mais do pontos_selecionados_map, pois agora estamos\n",
        "    # enviando apenas uma lista de indices para o calcular_distancia_total\n",
        "    distancia_total = calcular_distancia_total(individuo, distancias, pontos_selecionados)\n",
        "    return (distancia_total,)\n",
        "\n",
        "# Definição dos tipos do DEAP\n",
        "if \"FitnessMin\" in creator.__dict__:\n",
        "    del creator.FitnessMin\n",
        "if \"Individual\" in creator.__dict__:\n",
        "    del creator.Individual\n",
        "\n",
        "creator.create(\"FitnessMin\", base.Fitness, weights=(-1.0,))\n",
        "creator.create(\"Individual\", list, fitness=creator.FitnessMin)\n",
        "\n",
        "# Função para inicializar a população\n",
        "def inicializar_populacao(toolbox, tamanho_populacao):\n",
        "    return toolbox.population(n=tamanho_populacao)\n",
        "\n",
        "# Função do algoritmo genético\n",
        "def algoritmo_genetico(distancias, pontos_selecionados, taxa_mutacao_inicial=0.1, elitismo_size=2, max_geracoes_sem_melhoria=10):\n",
        "    num_pontos = len(pontos_selecionados)\n",
        "\n",
        "    # Ajustar número de gerações e tamanho da população\n",
        "    # se o num_pontos for maior que 100, entao usaremos valores menores\n",
        "    # para que o algoritmo nao demore tanto tempo\n",
        "    if num_pontos > 100:\n",
        "        num_geracoes = 10 * num_pontos  # Reduzido para maior eficiência\n",
        "        tamanho_populacao = 2 * num_pontos  # Reduzido para maior eficiência\n",
        "    else:\n",
        "        num_geracoes = 20 * num_pontos  # Reduzido para maior eficiência\n",
        "        tamanho_populacao = 5 * num_pontos  # Reduzido para maior eficiência\n",
        "\n",
        "    indices_pontos = list(range(num_pontos)) # Corrected: Use a list of indices\n",
        "    toolbox = base.Toolbox()\n",
        "    toolbox.register(\"indices\", random.sample, indices_pontos, len(indices_pontos))\n",
        "    toolbox.register(\"individual\", tools.initIterate, creator.Individual, toolbox.indices)\n",
        "    toolbox.register(\"population\", tools.initRepeat, list, toolbox.individual)\n",
        "\n",
        "    toolbox.register(\"mate\", tools.cxOrdered)\n",
        "    toolbox.register(\"mutate\", tools.mutShuffleIndexes, indpb=taxa_mutacao_inicial)\n",
        "    toolbox.register(\"select\", tools.selTournament, tournsize=2)  # Tamanho do torneio reduzido\n",
        "    toolbox.register(\"evaluate\", avaliar, pontos_selecionados=pontos_selecionados)\n",
        "\n",
        "    pop = inicializar_populacao(toolbox, tamanho_populacao)\n",
        "    fitnesses = list(map(toolbox.evaluate, pop))\n",
        "    for ind, fit in zip(pop, fitnesses):\n",
        "        ind.fitness.values = fit\n",
        "\n",
        "    best_individuals = tools.selBest(pop, elitismo_size)\n",
        "    melhor_fitness = best_individuals[0].fitness.values[0]\n",
        "    geracoes_sem_melhoria = 0\n",
        "\n",
        "    for g in range(num_geracoes):\n",
        "        # Ajustar taxa de mutação dinamicamente\n",
        "        taxa_mutacao = taxa_mutacao_inicial * (1 - g / num_geracoes)\n",
        "        toolbox.register(\"mutate\", tools.mutShuffleIndexes, indpb=taxa_mutacao)\n",
        "\n",
        "        offspring = toolbox.select(pop, len(pop) - elitismo_size)\n",
        "        offspring = list(map(toolbox.clone, offspring))\n",
        "\n",
        "        for child1, child2 in zip(offspring[::2], offspring[1::2]):\n",
        "            if random.random() < 0.7:\n",
        "                toolbox.mate(child1, child2)\n",
        "                del child1.fitness.values\n",
        "                del child2.fitness.values\n",
        "\n",
        "        for mutant in offspring:\n",
        "            if random.random() < taxa_mutacao:\n",
        "                toolbox.mutate(mutant)\n",
        "                del mutant.fitness.values\n",
        "\n",
        "        invalid_ind = [ind for ind in offspring if not ind.fitness.valid]\n",
        "        fitnesses = map(toolbox.evaluate, invalid_ind)\n",
        "        for ind, fit in zip(invalid_ind, fitnesses):\n",
        "            ind.fitness.values = fit\n",
        "\n",
        "        pop[:] = offspring + best_individuals\n",
        "        best_individuals = tools.selBest(pop, elitismo_size)\n",
        "\n",
        "        # Verificar convergência\n",
        "        novo_melhor_fitness = best_individuals[0].fitness.values[0]\n",
        "        if novo_melhor_fitness < melhor_fitness:\n",
        "            melhor_fitness = novo_melhor_fitness\n",
        "            geracoes_sem_melhoria = 0\n",
        "        else:\n",
        "            geracoes_sem_melhoria += 1\n",
        "\n",
        "        # Critério de parada por convergência\n",
        "        if geracoes_sem_melhoria >= max_geracoes_sem_melhoria:\n",
        "            print(f\"Convergência atingida após {g + 1} gerações.\")\n",
        "            break\n",
        "\n",
        "    # Corrected: Return the best individual and the list of selected points\n",
        "    return tools.selBest(pop, 1)[0], pontos_selecionados\n",
        "\n",
        "# Função para exibir a matriz de distâncias com base nos pontos selecionados\n",
        "def exibir_matriz_distancias(pontos_selecionados):\n",
        "    if not pontos_selecionados:\n",
        "        print(\"Nenhum ponto selecionado. Escolha os pontos primeiro.\")\n",
        "        return\n",
        "\n",
        "    # Dicionário de abreviações personalizadas\n",
        "    abreviacoes_personalizadas = {\n",
        "        \"Memorial Paulo Freire\": \"MPFreire\",\n",
        "        \"Praça das Flores - UFERSA Angicos, RN\": \"P.Flores\",\n",
        "        \"Restaurante Universitário\": \"Rest.Uni\",\n",
        "        \"Biblioteca Campus Angicos\": \"Bibl.CA\",\n",
        "        \"Bloco 1 de Aulas\": \"B1.Aulas\",\n",
        "        \"Bloco 2 de Aulas\": \"B2.Aulas\",\n",
        "        \"Bloco administrativo - UFERSA Angicos, RN\": \"Bloco.Adm\",\n",
        "        \"Laboratórios 1 - UFERSA Angicos, RN\": \"Lab.1\",\n",
        "        \"Laboratórios 2 - UFERSA Angicos, RN\": \"Lab.2\",\n",
        "        \"Bloco 1 de Professores\": \"B1.Prof\",\n",
        "        \"Bloco 2 de Professores\": \"B2.Prof\",\n",
        "        \"Estacionamento\": \"Estac.\",\n",
        "        \"Garagem da UFERSA Angicos\": \"Garagem\",\n",
        "        \"Ginásio Poliesportivo da UFERSA Angicos\": \"Gin.Poli\",\n",
        "        \"Almoxarifado da UFERSA Angicos\": \"Almox.\"\n",
        "    }\n",
        "\n",
        "    print(\"\\nMatriz de Distâncias (em metros):\")\n",
        "\n",
        "    # Usar o dicionário de abreviações personalizadas ou gerar abreviação automática\n",
        "    abreviacoes = {}\n",
        "    for ponto in pontos_selecionados:\n",
        "        abreviacoes[ponto] = abreviacoes_personalizadas.get(ponto, ''.join([palavra[0] for palavra in ponto.split()]))\n",
        "\n",
        "    num_pontos = len(pontos_selecionados)\n",
        "    tamanho_celula = 10  # Ajusta o tamanho das células da tabela\n",
        "\n",
        "    # Desenha a linha superior da tabela\n",
        "    print(\"┌\" + \"─\" * tamanho_celula + (\"┬\" + \"─\" * tamanho_celula) * (num_pontos - 1) + \"┐\")\n",
        "\n",
        "    # Imprime o cabeçalho da tabela\n",
        "    header = \"│\"\n",
        "    for ponto in pontos_selecionados:\n",
        "        header += f\"{abreviacoes[ponto]:^{tamanho_celula}}│\"\n",
        "    print(header)\n",
        "\n",
        "    # Desenha a linha divisória após o cabeçalho\n",
        "    print(\"├\" + \"─\" * tamanho_celula + (\"┼\" + \"─\" * tamanho_celula) * (num_pontos - 1) + \"┤\")\n",
        "\n",
        "    # Imprime as linhas da tabela\n",
        "    for i, ponto1 in enumerate(pontos_selecionados):\n",
        "        row = \"│\"\n",
        "        for j, ponto2 in enumerate(pontos_selecionados):\n",
        "            row += f\"{distancias[list(pontos.values()).index(ponto1)][list(pontos.values()).index(ponto2)]:^{tamanho_celula}}│\"\n",
        "        print(row)\n",
        "        if i < num_pontos - 1:\n",
        "            # Desenha as linhas horizontais entre as linhas da tabela\n",
        "            print(\"├\" + \"─\" * tamanho_celula + (\"┼\" + \"─\" * tamanho_celula) * (num_pontos - 1) + \"┤\")\n",
        "\n",
        "    # Desenha a linha inferior da tabela\n",
        "    print(\"└\" + \"─\" * tamanho_celula + (\"┴\" + \"─\" * tamanho_celula) * (num_pontos - 1) + \"┘\")\n",
        "\n",
        "# Função para retirar pontos\n",
        "def retirar_pontos(pontos_selecionados):\n",
        "    print(\"\\nPontos selecionados atualmente:\")\n",
        "    for i, ponto in enumerate(pontos_selecionados, 1):\n",
        "        print(f\"{i}: {ponto}\")\n",
        "    pontos_retirar = input(\"Digite os números dos pontos que deseja retirar (separados por vírgula): \").split(',')\n",
        "    pontos_retirar = [int(i) - 1 for i in pontos_retirar if i.isdigit() and 0 < int(i) <= len(pontos_selecionados)]\n",
        "    for i in sorted(pontos_retirar, reverse=True):\n",
        "        pontos_selecionados.pop(i)\n",
        "    return pontos_selecionados\n",
        "\n",
        "# Função principal\n",
        "def main():\n",
        "    pontos_lista = list(pontos.values())\n",
        "    pontos_selecionados = []\n",
        "\n",
        "    while True:\n",
        "        print(\"\\n--- Menu Principal ---\")\n",
        "        print(\"1: Escolher pontos de entrega\")\n",
        "        print(\"2: Gerar rota\")\n",
        "        print(\"3: Exibir matriz de distâncias\")\n",
        "        print(\"4: Retirar pontos\")\n",
        "        print(\"5: Sair\")\n",
        "        opcao = input(\"Escolha uma opção: \")\n",
        "\n",
        "        if opcao == \"1\":\n",
        "            print(\"\\nPontos disponíveis:\")\n",
        "            for i, ponto in enumerate(pontos_lista, 1):\n",
        "                print(f\"{i}: {ponto}\")\n",
        "            pontos_selecionados_str = input(\"Escolha os pontos que deseja percorrer (separados por vírgula): \").split(',')\n",
        "            pontos_selecionados = [pontos_lista[int(i) - 1] for i in pontos_selecionados_str if i.isdigit() and 0 < int(i) <= len(pontos_lista)]\n",
        "            if len(pontos_selecionados) == 0:\n",
        "                print(\"Nenhum ponto válido selecionado.\")\n",
        "                continue\n",
        "        elif opcao == \"2\":\n",
        "            if len(pontos_selecionados) == 0:\n",
        "                print(\"Nenhum ponto selecionado. Escolha os pontos primeiro.\")\n",
        "                continue\n",
        "            melhor_rota_indices, pontos_selecionados = algoritmo_genetico(distancias, pontos_selecionados)\n",
        "            # aqui eu preciso usar o pontos_selecionados_map para converter os indices de volta para os pontos\n",
        "            melhor_rota = [pontos_selecionados[idx] for idx in melhor_rota_indices]\n",
        "            print(\"\\nMelhor Rota Encontrada:\")\n",
        "            for ponto in melhor_rota:\n",
        "                print(ponto)\n",
        "            print(f\"\\nDistância total: {calcular_distancia_total(melhor_rota_indices, distancias, pontos_selecionados)} metros\")\n",
        "\n",
        "        elif opcao == \"3\":\n",
        "            exibir_matriz_distancias(pontos_selecionados)\n",
        "\n",
        "        elif opcao == \"4\":\n",
        "            if len(pontos_selecionados) == 0:\n",
        "                print(\"Nenhum ponto selecionado para retirar.\")\n",
        "                continue\n",
        "            pontos_selecionados = retirar_pontos(pontos_selecionados)\n",
        "\n",
        "        elif opcao == \"5\":\n",
        "            print(\"Saindo do programa...\")\n",
        "            break\n",
        "\n",
        "        else:\n",
        "            print(\"Opção inválida. Tente novamente.\")\n",
        "\n",
        "# Executar o programa\n",
        "if __name__ == \"__main__\":\n",
        "    main()"
      ],
      "metadata": {
        "id": "8o5nSjuub25W"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}